<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.SecurityMatcherDao">
  <resultMap id="BaseResultMap" type="com.example.entity.SecurityMatcher">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="matchers" jdbcType="VARCHAR" property="matchers" />
    <result column="roles_name" jdbcType="VARCHAR" property="rolesName" />
    <result column="authoritys_name" jdbcType="VARCHAR" property="authoritysName" />
    <result column="ip_address" jdbcType="VARCHAR" property="ipAddress" />
    <result column="level" jdbcType="INTEGER" property="level" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, matchers, roles_name, authoritys_name, ip_address, `level`
  </sql>
  <select id="selectByExample" parameterType="com.example.query.SecurityMatcherExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from security_matcher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from security_matcher
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from security_matcher
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.query.SecurityMatcherExample">
    delete from security_matcher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.example.entity.SecurityMatcher" useGeneratedKeys="true">
    insert into security_matcher (matchers, roles_name, authoritys_name, 
      ip_address, `level`)
    values (#{matchers,jdbcType=VARCHAR}, #{rolesName,jdbcType=VARCHAR}, #{authoritysName,jdbcType=VARCHAR}, 
      #{ipAddress,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.example.entity.SecurityMatcher" useGeneratedKeys="true">
    insert into security_matcher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="matchers != null">
        matchers,
      </if>
      <if test="rolesName != null">
        roles_name,
      </if>
      <if test="authoritysName != null">
        authoritys_name,
      </if>
      <if test="ipAddress != null">
        ip_address,
      </if>
      <if test="level != null">
        `level`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="matchers != null">
        #{matchers,jdbcType=VARCHAR},
      </if>
      <if test="rolesName != null">
        #{rolesName,jdbcType=VARCHAR},
      </if>
      <if test="authoritysName != null">
        #{authoritysName,jdbcType=VARCHAR},
      </if>
      <if test="ipAddress != null">
        #{ipAddress,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.query.SecurityMatcherExample" resultType="java.lang.Long">
    select count(*) from security_matcher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update security_matcher
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.matchers != null">
        matchers = #{record.matchers,jdbcType=VARCHAR},
      </if>
      <if test="record.rolesName != null">
        roles_name = #{record.rolesName,jdbcType=VARCHAR},
      </if>
      <if test="record.authoritysName != null">
        authoritys_name = #{record.authoritysName,jdbcType=VARCHAR},
      </if>
      <if test="record.ipAddress != null">
        ip_address = #{record.ipAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null">
        `level` = #{record.level,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update security_matcher
    set id = #{record.id,jdbcType=INTEGER},
      matchers = #{record.matchers,jdbcType=VARCHAR},
      roles_name = #{record.rolesName,jdbcType=VARCHAR},
      authoritys_name = #{record.authoritysName,jdbcType=VARCHAR},
      ip_address = #{record.ipAddress,jdbcType=VARCHAR},
      `level` = #{record.level,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.entity.SecurityMatcher">
    update security_matcher
    <set>
      <if test="matchers != null">
        matchers = #{matchers,jdbcType=VARCHAR},
      </if>
      <if test="rolesName != null">
        roles_name = #{rolesName,jdbcType=VARCHAR},
      </if>
      <if test="authoritysName != null">
        authoritys_name = #{authoritysName,jdbcType=VARCHAR},
      </if>
      <if test="ipAddress != null">
        ip_address = #{ipAddress,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        `level` = #{level,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.entity.SecurityMatcher">
    update security_matcher
    set matchers = #{matchers,jdbcType=VARCHAR},
      roles_name = #{rolesName,jdbcType=VARCHAR},
      authoritys_name = #{authoritysName,jdbcType=VARCHAR},
      ip_address = #{ipAddress,jdbcType=VARCHAR},
      `level` = #{level,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>